{"version":3,"sources":["../src/TemplateSlot.tsx","../src/types.ts","../src/useSlots.tsx"],"names":["list"],"mappings":"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","file":"index.mjs","sourcesContent":["import { FC } from \"react\";\nimport { TemplateSlotProps } from \"./types\";\n\nexport const TemplateSlot = <T extends Record<string, any>>({\n  children,\n}: TemplateSlotProps<T>) => {\n  return <>{children}</>;\n};\n","export type ATTR_SLOT_NAME = \"parent-slot\"\nexport const ATTR_SLOT_NAME_LITERAL = \"parent-slot\" as const\n\ntype Slot = string | [string, ] \n\nexport type TemplateSlotProps<T> = {\n    children: (data?: T extends Record<string, any> ? T : any) => React.ReactNode;\n    /* props?: Record<string, any>; */\n    [ATTR_SLOT_NAME_LITERAL]: string;\n};\n\nexport type TemplateSlotPropsChildren<T> = TemplateSlotProps<T extends Record<string, any> ? T : any>['children']\n\nexport type SlotNameProp = {\n    /** Perfer: <Child slot=\"header\" /> (similar to Web Components) */\n    slot?: string;\n    /** Other alternatives */\n    [ATTR_SLOT_NAME_LITERAL]?: ATTR_SLOT_NAME;\n};\n\nexport type SlotWithParameters = <T>(data?: T) => ReturnType<TemplateSlotPropsChildren<T>>\n\n/** slots maps: last of nodes names based on hook generic T .*/\nexport type NamedSlotsMap<T extends string> = Partial<\n    Record<T | \"default\", (React.ReactNode[] | SlotWithParameters)>\n> & { default: React.ReactNode[] | SlotWithParameters };\n\nexport type UseSlotsResult<T> = {\n    /** Object with named slots. */\n    slots: NamedSlotsMap<T extends string ? T : never>;\n    /** Return requested children slot by name or fallback. */\n    get: (name: T | \"default\", fallback?: React.ReactNode) => React.ReactNode | React.ReactNode[] | SlotWithParameters;\n    /** Return if slot exist. */\n    has: (name: T | \"default\") => boolean;\n    /** Return list of slots. */\n    list: (name: T | \"default\") => React.ReactNode[] | SlotWithParameters;\n};\n\nexport type hookOptions = {\n    forcedAllSlots: boolean\n}","import * as React from \"react\";\nimport {\n  ATTR_SLOT_NAME_LITERAL,\n  SlotNameProp,\n  TemplateSlotPropsChildren,\n  SlotWithParameters,\n  NamedSlotsMap,\n  UseSlotsResult,\n  hookOptions,\n} from \"./types\";\nimport { TemplateSlot } from \"./TemplateSlot\";\n\n/**\n * Function to search and return node slot name.\n * Recognizes props: slot and \"slot-name\".\n */\nfunction getNodeName(element: React.ReactNode): string | null {\n  if (React.isValidElement(element)) {\n    const props = (element.props ?? {}) as SlotNameProp &\n      Record<string, unknown>;\n\n    const name = (props.slot ?? (props as any)[ATTR_SLOT_NAME_LITERAL]) as\n      | string\n      | null;\n\n    return (name && String(name).trim()) || \"default\";\n  }\n\n  return null;\n}\n\n/**\n * Function to search and return node type.\n * Node type can be an especial library TempateSlot Component type (if you need use slots with parameters)\n * or any other type of element\n */\nfunction getNodeType(element: React.ReactNode): any {\n  if (React.isValidElement(element)) {\n    return element.type;\n  }\n\n  return null;\n}\n\n/**\n * Hook for extract \"slots\" from children special prop.\n * Recognizes props: slot and \"slot-name\".\n * All child without name belongs 'default' slot.\n */\nexport function useSlots<T extends string>(\n  children: React.ReactNode,\n  options: hookOptions = { forcedAllSlots: false }\n): UseSlotsResult<T> {\n  if (!children) {\n    throw new Error(\"react-slot-tools: required children parameter is missing\");\n  }\n\n  const slots = React.useMemo<NamedSlotsMap<T>>(() => {\n    const out: NamedSlotsMap<T> = { default: [] } as NamedSlotsMap<T>;\n\n    const slotsAsArray: React.ReactNode = React.Children.toArray(\n      children\n    ) as Array<React.ReactNode>;\n\n    for (const slotChild of slotsAsArray) {\n      let templateSlotChildren: TemplateSlotPropsChildren<any> | null = null;\n\n      let nodeToPush:\n        | SlotWithParameters\n        | React.ReactNode[]\n        | React.ReactNode\n        | null = null;\n\n      if (React.isValidElement(slotChild)) {\n        /* search slot name */\n        const slotKey = getNodeName(slotChild) as T | \"default\";\n\n        const SlotType = getNodeType(slotChild);\n\n        if (SlotType == TemplateSlot) {\n          //is function children\n          templateSlotChildren = slotChild?.props?.children;\n\n          if (!templateSlotChildren) {\n            throw new Error(\n              \"react-slot-tools: required children parameter is missing to create <TemplateSlot> component\"\n            );\n          }\n        }\n\n        if (\n          templateSlotChildren &&\n          typeof templateSlotChildren === \"function\"\n        ) {\n          type Fn = typeof templateSlotChildren;\n          type Args = Parameters<Fn>[0];\n\n          nodeToPush = (params?: Args) =>\n            (templateSlotChildren as SlotWithParameters)(params);\n        } else {\n          nodeToPush = slotChild as React.ReactNode;\n        }\n\n        if (!out[slotKey]) {\n          if (!templateSlotChildren) {\n            (out[slotKey as T] as any) = [nodeToPush];\n          } else {\n            (out[slotKey as T] as any) = nodeToPush;\n          }\n        } else {\n          if (!templateSlotChildren) {\n            (out[slotKey as T] as any).push(nodeToPush);\n          } else {\n            (out[slotKey as T] as any) = nodeToPush;\n          }\n        }\n      } else {\n        if (!out.default) {\n          out.default = [];\n        }\n\n        (out.default as React.ReactNode[]).push(slotChild);\n      }\n    }\n\n    /* if (options.forcedAllSlots) {\n      const keysExceptDefault = Object.keys(out).filter((k) => k !== \"default\");\n    } */\n\n    return out;\n  }, [children]);\n\n  const get = React.useCallback(\n    (name: T | \"default\", fallback?: React.ReactNode) => {\n      const list = slots[name as T];\n\n      if (list && list.length) {\n        return list;\n      }\n\n      return fallback ?? null;\n    },\n    [slots]\n  );\n\n  const has = React.useCallback(\n    (name: T | \"default\") => {\n      const list = slots[name as T];\n      return !!(list && list.length);\n    },\n    [slots]\n  );\n\n  const list = React.useCallback(\n    (name: T | \"default\") => {\n      return (slots[name as T] ?? []) as React.ReactNode[];\n    },\n    [slots]\n  );\n\n  return { slots, get, has, list };\n}\n"]}