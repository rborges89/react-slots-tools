{"version":3,"sources":["../src/types.ts","../src/useSlots.tsx"],"names":["React","list"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AACO,IAAM,sBAAA,GAAyB,aAAA;;;ACc/B,SAAS,SACd,QAAA,EACA,OAAA,GAAuB,EAAE,cAAA,EAAgB,OAAM,EAC5B;AACnB,EAAA,IAAI,CAAC,QAAA,EAAU;AACb,IAAA,MAAM,IAAI,MAAM,0DAA0D,CAAA;AAAA,EAC5E;AAEA,EAAA,MAAM,KAAA,GAAcA,yBAA0B,MAAM;AAClD,IAAA,MAAM,GAAA,GAAwB,EAAE,OAAA,EAAS,EAAC,EAAE;AAE5C,IAAA,MAAM,eAAsCA,gBAAA,CAAA,QAAA,CAAS,OAAA;AAAA,MACnD;AAAA,KACF;AAEA,IAAA,KAAA,MAAW,aAAa,YAAA,EAAc;AAEpC,MAAA,IAAUA,gBAAA,CAAA,cAAA,CAAe,SAAS,CAAA,EAAG;AACnC,QAAA,MAAM,KAAA,GAAS,SAAA,CAAU,KAAA,IAAS,EAAC;AAInC,QAAA,MAAM,OAAQ,KAAA,CAAM,IAAA,IAClB,KAAA,CAAM,QAAA,IACL,MAAc,sBAAsB,CAAA;AAEvC,QAAA,MAAM,UAAY,IAAA,IAAQ,MAAA,CAAO,IAAI,CAAA,CAAE,MAAK,IAAM,SAAA;AAIlD,QAAA,IAAI,CAAC,GAAA,CAAI,OAAO,CAAA,EAAG;AACjB,UAAC,GAAA,CAAI,OAAY,CAAA,GAA0B;AAAA,YACzC;AAAA,WACF;AAAA,QACF,CAAA,MAAO;AACL,UAAC,GAAA,CAAI,OAAY,CAAA,CAAwB,IAAA,CAAK,SAAS,CAAA;AAAA,QACzD;AAAA,MACF,CAAA,MAAO;AAEL,QAAA,IAAI,CAAC,IAAI,OAAA,EAAS;AAChB,UAAA,GAAA,CAAI,UAAU,EAAC;AAAA,QACjB;AAEA,QAAA,GAAA,CAAI,OAAA,CAAQ,KAAK,SAAS,CAAA;AAAA,MAC5B;AAAA,IACF;AAMA,IAAA,OAAO,GAAA;AAAA,EACT,CAAA,EAAG,CAAC,QAAQ,CAAC,CAAA;AAEb,EAAA,MAAM,GAAA,GAAYA,gBAAA,CAAA,WAAA;AAAA,IAChB,CAAC,MAAqB,QAAA,KAA+B;AACnD,MAAA,MAAMC,KAAAA,GAAO,MAAM,IAAS,CAAA;AAE5B,MAAA,IAAIA,KAAAA,IAAQA,MAAK,MAAA,EAAQ;AACvB,QAAA,OAAOA,KAAAA;AAAA,MACT;AAEA,MAAA,OAAO,QAAA,IAAY,IAAA;AAAA,IACrB,CAAA;AAAA,IACA,CAAC,KAAK;AAAA,GACR;AAEA,EAAA,MAAM,GAAA,GAAYD,gBAAA,CAAA,WAAA;AAAA,IAChB,CAAC,IAAA,KAAwB;AACvB,MAAA,MAAMC,KAAAA,GAAO,MAAM,IAAS,CAAA;AAC5B,MAAA,OAAO,CAAC,EAAEA,KAAAA,IAAQA,KAAAA,CAAK,MAAA,CAAA;AAAA,IACzB,CAAA;AAAA,IACA,CAAC,KAAK;AAAA,GACR;AAEA,EAAA,MAAM,IAAA,GAAaD,gBAAA,CAAA,WAAA;AAAA,IACjB,CAAC,IAAA,KAAwB;AACvB,MAAA,OAAQ,KAAA,CAAM,IAAS,CAAA,IAAK,EAAC;AAAA,IAC/B,CAAA;AAAA,IACA,CAAC,KAAK;AAAA,GACR;AAEA,EAAA,OAAO,EAAE,KAAA,EAAO,GAAA,EAAK,GAAA,EAAK,IAAA,EAAK;AACjC","file":"index.cjs","sourcesContent":["export type ATTR_SLOT_NAME = \"slot-parent\"\nexport const ATTR_SLOT_NAME_LITERAL = \"slot-parent\" as const\n\nexport type SlotNameProp = {\n    /** Perfer: <Child slot=\"header\" /> (similar to Web Components) */\n    slot?: string;\n    /** Other alternatives */\n    slotName?: string;\n    [ATTR_SLOT_NAME_LITERAL]?: ATTR_SLOT_NAME;\n};\n\n/** slots maps: last of nodes names based on hook generic T .*/\nexport type NamedSlotsMap<T extends string> = Partial<\n    Record<T | \"default\", React.ReactNode[]>\n> & { default: React.ReactNode[] };\n\nexport type UseSlotsResult<T> = {\n    /** Objeto con todos los slots nombrados y el default. */\n    slots: NamedSlotsMap<T extends string ? T : never> & {\n        default?: React.ReactNode[];\n    };\n    /** Devuelve los children del slot solicitado o un fallback. */\n    get: (name: T | \"default\", fallback?: React.ReactNode) => React.ReactNode;\n    /** Indica si existe contenido para el slot. */\n    has: (name: T | \"default\") => boolean;\n    /** Devuelve el array puro de un slot (Ãºtil si necesitas mapear). */\n    list: (name: T | \"default\") => React.ReactNode[];\n};\n\nexport type hookOptions = {\n    forcedAllSlots: boolean\n}","import * as React from \"react\";\nimport {\n  ATTR_SLOT_NAME,\n  ATTR_SLOT_NAME_LITERAL,\n  SlotNameProp,\n  NamedSlotsMap,\n  UseSlotsResult,\n  hookOptions,\n} from \"./types\";\n\n/**\n * Hook for extract \"slots\" from children special prop.\n * Recognizes props: slot, slotName and \"slot-name\".\n * All child without name belongs 'default' slot.\n */\nexport function useSlots<T extends string>(\n  children: React.ReactNode,\n  options: hookOptions = { forcedAllSlots: false }\n): UseSlotsResult<T> {\n  if (!children) {\n    throw new Error(\"react-slot-tools: required children parameter is missing\");\n  }\n\n  const slots = React.useMemo<NamedSlotsMap<T>>(() => {\n    const out: NamedSlotsMap<T> = { default: [] } as NamedSlotsMap<T>;\n\n    const slotsAsArray: React.ReactNode = React.Children.toArray(\n      children\n    ) as Array<React.ReactNode>;\n\n    for (const slotChild of slotsAsArray) {\n      // Si es un elemento React, puede traer props con el nombre del slot\n      if (React.isValidElement(slotChild)) {\n        const props = (slotChild.props ?? {}) as SlotNameProp &\n          Record<string, unknown>;\n\n        /* Buscando el nombre del slot, puede ser la propiedad slot-name sino es default */\n        const name = (props.slot ??\n          props.slotName ??\n          (props as any)[ATTR_SLOT_NAME_LITERAL]) as string | undefined;\n\n        const slotKey = ((name && String(name).trim()) || \"default\") as\n          | T\n          | \"default\";\n\n        if (!out[slotKey]) {\n          (out[slotKey as T] as React.ReactNode[]) = [\n            slotChild as React.ReactNode,\n          ];\n        } else {\n          (out[slotKey as T] as React.ReactNode[]).push(slotChild);\n        }\n      } else {\n        // string | number | etc: lo consideramos contenido del default\n        if (!out.default) {\n          out.default = [];\n        }\n\n        out.default.push(slotChild);\n      }\n    }\n\n    /* if (options.forcedAllSlots) {\n      const keysExceptDefault = Object.keys(out).filter((k) => k !== \"default\");\n    } */\n\n    return out;\n  }, [children]);\n\n  const get = React.useCallback(\n    (name: T | \"default\", fallback?: React.ReactNode) => {\n      const list = slots[name as T];\n\n      if (list && list.length) {\n        return list;\n      }\n\n      return fallback ?? null;\n    },\n    [slots]\n  );\n\n  const has = React.useCallback(\n    (name: T | \"default\") => {\n      const list = slots[name as T];\n      return !!(list && list.length);\n    },\n    [slots]\n  );\n\n  const list = React.useCallback(\n    (name: T | \"default\") => {\n      return (slots[name as T] ?? []) as React.ReactNode[];\n    },\n    [slots]\n  );\n\n  return { slots, get, has, list };\n}\n"]}